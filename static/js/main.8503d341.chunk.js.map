{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","icon","faMarkdown","href","target","title","rel","faGithub","size","MarkdownConverter","props","state","input","handleInput","bind","event","this","setState","value","faKeyboard","role","onClick","navigator","clipboard","writeText","faCopy","id","onChange","faDesktop","document","getElementById","innerHTML","faCode","children","remarkPlugins","remarkGfm","remarkBreaks","components","code","node","inline","match","exec","String","replace","style","coldarkDark","language","PreTag","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+WA2EA,SAASA,IACP,OACE,sBAAKC,UAAU,SAAf,UACE,qBAAIA,UAAU,WAAd,UAAyB,cAAC,IAAD,CAAiBC,KAAMC,MAAhD,yBACA,oBAAGC,KAAK,yDACNH,UAAU,cACVI,OAAO,SACPC,MAAM,iBACNC,IAAI,aAJN,UAKE,cAAC,IAAD,CAAiBL,KAAMM,IAAUC,KAAK,OALxC,wB,IAWAC,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,MAlFe,ugDAmFf,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAJL,E,+CAOlB,SAAYC,GACVC,KAAKC,SAAU,CACbL,MAAOG,EAAMX,OAAOc,U,oBAI1B,WAAS,IAAD,OACN,OACE,sBAAKlB,UAAU,OAAf,UACE,sBAAKA,UAAU,QAAf,UACI,sBAAKA,UAAU,cAAf,UACE,qBAAIA,UAAU,WAAd,UAAyB,cAAC,IAAD,CAAiBC,KAAMkB,IAAYX,KAAK,OAAjE,oBACA,mBAAGL,KAAK,IAAIH,UAAU,cAAcoB,KAAK,SAASf,MAAM,gBAAgBgB,QAAS,kBAAOC,UAAUC,UAAUC,UAAU,EAAKb,MAAMC,QAAjI,SAAyI,cAAC,IAAD,CAAiBX,KAAMwB,IAAQjB,KAAK,YAE/K,0BAAUR,UAAU,QAAQ0B,GAAG,SAASC,SAAUX,KAAKH,YAAvD,SAAqEG,KAAKL,MAAMC,WAEpF,sBAAKZ,UAAU,QAAf,UACI,sBAAKA,UAAU,cAAf,UACE,qBAAIA,UAAU,WAAd,UAAyB,cAAC,IAAD,CAAiBC,KAAM2B,IAAWpB,KAAK,OAAhE,qBACA,mBAAGL,KAAK,IAAIH,UAAU,cAAcoB,KAAK,SAASf,MAAM,YACxDgB,QAAS,kBAAOC,UAAUC,UAAUC,UAAUK,SAASC,eAAe,WAAWC,YADjF,SAEE,cAAC,IAAD,CAAiB9B,KAAM+B,IAAQxB,KAAK,YAExC,qBAAKR,UAAU,SAAS0B,GAAG,UAA3B,SACE,cAAC,IAAD,CACAO,SAAUjB,KAAKL,MAAMC,MAAOsB,cAAe,CAAC,CAACC,KAAY,CAACC,MAE1DC,WAAY,CACVC,KADU,YAC0C,EAA9CC,KAA+C,IAAzCC,EAAwC,EAAxCA,OAAQxC,EAAgC,EAAhCA,UAAWiC,EAAqB,EAArBA,SAAavB,EAAQ,iBAC5C+B,EAAQ,iBAAiBC,KAAK1C,GAAa,IACjD,OAAQwC,GAAUC,EAChB,cAAC,IAAD,aACER,SAAUU,OAAOV,GAAUW,QAAQ,MAAO,IAC1CC,MAAOC,IACPC,SAAUN,EAAM,GAChBO,OAAO,OACHtC,IAGN,8CAAMV,UAAWA,GAAeU,GAAhC,aACGuB,qB,GAhDWgB,IAAMC,WAwEvBC,MAVf,WACE,OACE,sBAAKnD,UAAU,MAAf,UACE,cAACD,EAAD,IACA,cAAC,EAAD,QChJSqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iBCAdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,IAAD,OAEFlC,SAASC,eAAe,SAM1BsB,K","file":"static/js/main.8503d341.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport remarkBreaks from 'remark-breaks';\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter';\nimport {coldarkDark} from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMarkdown, faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { faDesktop, faCode } from '@fortawesome/free-solid-svg-icons'\nimport { faKeyboard, faCopy } from '@fortawesome/free-regular-svg-icons'\n\nconst defaultMarkdown = `_This is just placeholder text. When you are ready to edit select it all and delete._\n\n# Welcome to Markdown Previewer!\n\n## General Formatting\n\n### There are smaller sub-headings ...\n\n> You can create a blockquote. \n\nYou can make text **bold**... \nOr _italic_.\nOr... **_both_**\nAnd with GFM (_github flavoured markdown_) you can go crazy ~~crossing stuff out~~.\n\nYou can also create [links](https://www.freecodecamp.org)\n\nAnd tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here...\nAnd here. | Okay. | I think we get it.\n\n- And of course, there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And numbered lists too.\n1. Use just 1s if you want!\n1. Don't forget about ...\n\n\n## Formatting Code\n\nHere's some inline code, \\`<div></div>\\`, marked using backticks.\n\nThis is code, marked using 3 backticks. 3 tildes (~) work too.\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\nIf you specify the code language next to the backticks (eg. js, css, html) it will highlight the code.\n\n\\`\\`\\`html\n<div>\n  <h1>Heading</h1>\n  <p> Hello here is some text</p>\n</div>\n\\`\\`\\`\n\n## Embedding Images\nYou can embed images like this:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)`;\n\nfunction Navbar() {\n  return (\n    <div className=\"Navbar\">\n      <h1 className=\"PageText\"><FontAwesomeIcon icon={faMarkdown} /> Markdown Previewer</h1>\n      <a href='https://guides.github.com/features/mastering-markdown/' \n        className='PanelButton' \n        target='_blank' \n        title=\"Learn Markdown\"\n        rel='noreferrer'>\n        <FontAwesomeIcon icon={faGithub} size='lg' /> Markdown Guide\n        </a>\n    </div>\n  )\n}\n\nclass MarkdownConverter extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      input: defaultMarkdown};\n      this.handleInput = this.handleInput.bind(this);\n  }\n\n  handleInput(event) {\n    this.setState ({\n      input: event.target.value\n  });\n}\n\nrender(){\n  return (\n    <div className=\"Main\">\n      <div className=\"Panel\">\n          <div className=\"PanelHeader\">\n            <h3 className=\"PageText\"><FontAwesomeIcon icon={faKeyboard} size='lg' /> Edit Markdown</h3>\n            <a href='#' className='PanelButton' role=\"button\" title=\"Copy Markdown\" onClick={() =>  navigator.clipboard.writeText(this.state.input)}><FontAwesomeIcon icon={faCopy} size='md' /></a>\n          </div>\n          <textarea className=\"Input\" id=\"editor\" onChange={this.handleInput}>{this.state.input}</textarea>\n      </div>\n      <div className=\"Panel\">\n          <div className=\"PanelHeader\">\n            <h3 className=\"PageText\"><FontAwesomeIcon icon={faDesktop} size='md' /> Preview Result</h3>\n            <a href='#' className='PanelButton' role=\"button\" title=\"Copy HTML\"\n            onClick={() =>  navigator.clipboard.writeText(document.getElementById('preview').innerHTML)}>\n              <FontAwesomeIcon icon={faCode} size='md' /></a>\n          </div>\n          <div className=\"Output\" id=\"preview\">\n            <ReactMarkdown\n            children={this.state.input} remarkPlugins={[[remarkGfm], [remarkBreaks\n            ]]}\n            components={{\n              code({node, inline, className, children, ...props}) {\n                const match = /language-(\\w+)/.exec(className || '')\n                return !inline && match ? (\n                  <SyntaxHighlighter\n                    children={String(children).replace(/\\n$/, '')}\n                    style={coldarkDark}\n                    language={match[1]}\n                    PreTag=\"div\"\n                    {...props}\n                  />\n                ) : (\n                  <code className={className} {...props}>\n                    {children}\n                  </code>\n                )\n              }\n            }}\n          />\n        </div>\n    </div>\n    </div>\n  );\n}\n};\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <MarkdownConverter />\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ReactFCCtest from 'react-fcctest';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <ReactFCCtest />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}